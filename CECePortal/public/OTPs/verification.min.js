const inputs = document.querySelectorAll(".otp-field > input");
const button = document.querySelector(".btn");
const resendButton = document.querySelector("#resendOTP");
let canResend = true;
let resendTimeout;

//Check if user is authenticated to use the page
window.addEventListener('load', () => {
    // Check if schoolEmail and schoolNumber are present in session storage
    const schoolEmail = sessionStorage.getItem('schoolEmail');
    const schoolNumber = sessionStorage.getItem('schoolNumber');

    if (!schoolEmail || !schoolNumber) {
        // If either value is missing, redirect the user to login page or another relevant page
        showNotification("error", 'Unauthorized access. Please log in to continue.');
        
        // Redirect to login.html after showing the notification
        setTimeout(() => {
            window.location.href = 'login.html';
        }, 1000); // Wait for a second before redirecting
    }
});

// Focus on the first input on page load
window.addEventListener("load", () => {
    inputs[0].focus();
    button.setAttribute("disabled", "disabled");
});

// Input handling for OTP fields
inputs.forEach((input, index) => {
    input.addEventListener("input", (e) => {
        if (input.value.length > 1) {
            input.value = ""; // Prevent more than one character
            return;
        }

        if (e.inputType !== "deleteContentBackward") {
            if (input.value && index < inputs.length - 1) {
                inputs[index + 1].removeAttribute("disabled");
                inputs[index + 1].focus();
            }
        } else if (e.inputType === "deleteContentBackward") {
            if (index > 0) {
                inputs[index].setAttribute("disabled", "disabled");
                inputs[index - 1].focus();
            }
        }

        // Check if all inputs are filled
        const allFilled = Array.from(inputs).every(input => input.value.length === 1);
        button.disabled = !allFilled;
    });

    input.addEventListener("keydown", (e) => {
        // Handle backspace and delete navigation
        if ((e.key === "Backspace" || e.key === "Delete") && !input.value && index > 0) {
            inputs[index - 1].focus();
        }
    });
});

// Handle pasting into the first box
inputs[0].addEventListener("paste", (event) => {
    event.preventDefault();
    const pastedValue = (event.clipboardData || window.clipboardData).getData("text").split("");

    inputs.forEach((input, i) => {
        if (pastedValue[i]) {
            input.value = pastedValue[i];
            if (i < inputs.length - 1) inputs[i + 1].removeAttribute("disabled");
        } else {
            input.value = "";
            input.setAttribute("disabled", "disabled");
        }
    });

    const allFilled = Array.from(inputs).every(input => input.value.length === 1);
    button.disabled = !allFilled;
});

// Handle OTP submission
button.addEventListener("click", () => {
    let otp = '';
    inputs.forEach(input => {
        otp += input.value;
    });

    if (otp.length === 6) {
        // Retrieve schoolEmail and schoolNumber from session storage
        const schoolEmail = sessionStorage.getItem('schoolEmail');
        const schoolNumber = sessionStorage.getItem('schoolNumber');

        if (!schoolEmail || !schoolNumber) {
            showNotification("error", 'Missing school information. Please try again.');
            return;
        }

        // Send OTP along with schoolEmail and schoolNumber to server for verification
        fetch('http://localhost:3000/api/otp/verify', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ otp: otp, school_email: schoolEmail, school_number: schoolNumber })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification("success", 'OTP has been verified successfully!');

                // Clear session storage
                sessionStorage.removeItem('schoolEmail');
                sessionStorage.removeItem('schoolNumber');

                // Redirect to login page
                setTimeout(() => {
                    window.location.href = 'login.html';
                }, 1000); // Wait for a second before redirecting
            } else {
                showNotification("error", 'Invalid OTP entered. Please try again.');
            }
        })
        .catch(error => console.error('Error:', error));
    } else {
        showNotification("error", 'Please enter a valid 6-character OTP.');
    }
});

// Handle OTP resend
resendButton.addEventListener("click", () => {
    if (!canResend) {
        showNotification("info", 'Please wait for a while before requesting a new OTP.');
        return;
    }

    // Disable resend button and set timeout
    canResend = false;
    resendButton.classList.add('disabled'); // Add a class to visually disable it
    resendButton.innerHTML = 'Wait 60s before resending OTP';

    // Retrieve schoolEmail and schoolNumber from session storage
    const schoolEmail = sessionStorage.getItem('schoolEmail');
    const schoolNumber = sessionStorage.getItem('schoolNumber');

    // Send request to resend OTP
    fetch('http://localhost:3000/api/otp/resend', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
            school_email: schoolEmail, 
            school_number: schoolNumber 
        }) // Include schoolEmail and schoolNumber in the body
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification("info", 'OTP resent successfully!');
            return; // Stop further execution after successful OTP send
        } else {
            showNotification("info", 'Failed to resend OTP. Please try again.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification("error", 'An error occurred. Please try again.');
    });

    // Set the timer for 60 seconds before allowing resend only if OTP was sent successfully
    let timer = 60;
    resendTimeout = setInterval(() => {
        timer--;
        resendButton.innerHTML = `Wait ${timer}s before resending OTP`;

        if (timer === 0) {
            clearInterval(resendTimeout);
            resendButton.classList.remove('disabled');
            resendButton.innerHTML = 'Resend OTP verification code';
            canResend = true; // Allow resend after the timer
        }
    }, 1000);
});

function showNotification(type, message) {
    const notification = document.getElementById('notification');

    // Clear any existing notification classes
    notification.className = 'notification unselectable';

    // Add the appropriate class based on the type
    if (type === 'error') {
        notification.classList.add('error');
    } else if (type === 'success') {
        notification.classList.add('success');
    } else if (type === 'info') {
        notification.classList.add('info');
    }

    // Set the message and show the notification
    notification.textContent = message;
    notification.style.display = 'block';

    // Hide the notification after a few seconds
    setTimeout(() => {
        notification.style.display = 'none';
    }, 3000);
}